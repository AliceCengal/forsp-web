{
  "std": {
    "name": "std.fp",
    "cts": "std",
    "uts": "lxmayfy8",
    "content": "(\r\n  (>x x)                               >force\r\n  (>x <x <x)                           >dup\r\n  (>_)                                 >drop\r\n  (>x >y <x <y)                        >swap\r\n\r\n  ('())                                >nil\r\n  ('() eq)                             >null?\r\n\r\n  (>x x cswap >_ >x x)                 >if\r\n  (>f >t >c >fn <f <t <c fn)           >endif\r\n\r\n  (>f (>x (<x x) f) dup force)         >Y\r\n  (>g (<g Y))                          >rec\r\n\r\n  (tag 1 eq)                           >atom?\r\n  (tag 2 eq)                           >num?\r\n  (tag 3 eq)                           >pair?\r\n\r\n  ;; bitwise ops\r\n\r\n  ;; >b-nor is primitive\r\n  (dup b-nor swap dup b-nor b-nor)     >b-and\r\n  (b-nor dup b-nor)                    >b-or\r\n  (dup b-nor)                          >b-not\r\n\r\n  ;; List\r\n\r\n  (\r\n    >thing\r\n    <if (<thing tag 0 eq)\r\n      #t\r\n      (\r\n        <if (<thing tag 3 eq)\r\n          #t\r\n          '()\r\n        endif\r\n      )\r\n    endif\r\n  )                                    >list?\r\n\r\n  ; length [ list -> num ]\r\n  (\r\n    >self >list\r\n    <if (<list null?)\r\n      0\r\n      (<list cdr self 1 +)\r\n    endif\r\n  ) rec                                >length\r\n\r\n  ; explode [ list[n] -> n[ val ] ]\r\n  (\r\n    >self >list\r\n    <if (<list null?)\r\n      ()\r\n      (<list cdr self <list car)\r\n    endif\r\n  ) rec                                >explode\r\n\r\n  ; implode [ n n[ val ] -> list[n] ]\r\n  (\r\n    >self >n\r\n    <if (0 <n eq)\r\n      nil\r\n      (>tmp <n 1 - self <tmp cons)\r\n    endif\r\n  ) rec                                >implode\r\n\r\n  ;; Dictionary\r\n\r\n  (\r\n    >maybe-dict\r\n    <if (<maybe-dict pair?)\r\n      (\r\n        <if (<maybe-dict car pair?)\r\n          (\r\n            <if (<maybe-dict car car atom?)\r\n              #t\r\n              '()\r\n            endif\r\n          )\r\n          '()\r\n        endif\r\n      )\r\n      '()\r\n    endif\r\n  )                                    >dict?\r\n\r\n  ; dict-get [ key dict -> value? ]\r\n  (\r\n    >self >key >dict\r\n    <if (<dict null?)\r\n      nil\r\n      (\r\n        <if (<dict car car <key eq)\r\n          (<dict car cdr)\r\n          (<dict cdr <key self)\r\n        endif\r\n      )\r\n    endif\r\n  ) rec                                >dict-get\r\n\r\n  ; dict-set [ value key dict -> dict ]\r\n  (\r\n    >self >dict >key >value\r\n  ) rec                                >dict-set\r\n\r\n  (\r\n    \r\n  ) rec >dict-nil\r\n\r\n  ;; String\r\n\r\n  (tag 6 eq)                           >string?\r\n\r\n)"
  },
  "tutorial": {
    "name": "tutorial.fp",
    "cts": "tutorial",
    "uts": "lxmayfya",
    "content": "(\r\n  ;; tutorial\r\n  ;; adapted from xorvoid\r\n\r\n  5\r\n  stack print\r\n  4 3\r\n  stack print\r\n\r\n  print\r\n  stack print\r\n\r\n  * print\r\n  stack print\r\n\r\n  5 >my-variable\r\n  stack print\r\n\r\n  <my-variable\r\n  stack print\r\n\r\n  >_\r\n\r\n  <my-variable <my-variable * print ;\r\n\r\n  (>x <x <x *) >square\r\n\r\n  67 square\r\n  stack print\r\n\r\n  'something\r\n  '(1 2 3)\r\n  '(abd (1 foo) ())\r\n  stack print\r\n\r\n  quote other\r\n  stack print\r\n\r\n  (>_) >drop\r\n\r\n  drop drop drop drop drop\r\n\r\n  (>x <x <x) >dup\r\n\r\n  7 dup * print;\r\n\r\n  (>x >y <x <y) >swap\r\n  (>x >y <y <x <y) >over\r\n  (>x >y >z <y <x <z) >rot\r\n\r\n  9 8 7 stack print  ; [ 9 , 8 , 7 ]\r\n  swap stack print   ; [ 9 , 7 , 8 ]\r\n  over stack print   ; [ 9 , 7 , 8 , 7 ]\r\n  drop stack print   ; [ 9 , 7 , 8 ]\r\n  rot stack print    ; [ 7 , 8 , 9 ]\r\n\r\n  (0 swap - -) >plus\r\n  4 5 plus print ; \r\n\r\n  (>x x) >force\r\n\r\n  (dup *) 8 swap force print;\r\n\r\n  (>cond >true >false cond <false <true rot cswap drop force) >if\r\n\r\n  (5) (4) 't  if print\r\n  (5) (4) '() if print\r\n\r\n  (>false >true >cond >if <false <true <cond if) >endif\r\n\r\n  <if (1 2 eq)\r\n    ('true print)\r\n    ('false print)\r\n  endif\r\n\r\n  <if (1 1 eq)\r\n    ('true print)\r\n    ('false print)\r\n  endif\r\n\r\n  (>f (>x (<x x) f) dup force) >Y\r\n\r\n  (>g (<g Y)) >rec\r\n\r\n  (>self >list\r\n    <if (<list '() eq) 0 (\r\n      <list cdr self 1 +\r\n    ) endif\r\n  ) rec >length\r\n\r\n  '()      length print ; 0\r\n  '(5)     length print ; 1\r\n  '(8 9)   length print ; 2\r\n  '(1 2 3) length print ; 3\r\n)"
  }
}
